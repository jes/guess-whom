#!/usr/bin/perl

use strict;
use warnings;

use DBM::Deep;
use Mojolicious::Lite;
use Mojo::JSON;

my %game;
my %ws_clients;

my $json = Mojo::JSON->new;

my $config = plugin 'Config';

foreach my $field (qw(host passphrase db)) {
    die "no $field in config" unless exists $config->{$field};
}

my $host = $config->{host};

my $db = DBM::Deep->new($config->{db});

$db->{stats}{rehashes}++;

get '/' => sub { shift->render('index'); };

get '/admin/stats' => sub { shift->render_text(text => $json->encode($db->{stats})); };

get '/admin/livestats' => sub {
    my $self = shift;

    my @clients = keys %ws_clients;
    my $nclients = @clients;

    my @games = keys %game;
    my $ngames = @games;

    $self->render_text(text => $json->encode({
        ws_clients => $nclients,
        livegames => $ngames,
    }));
};

get '/new-game' => sub {
    shift->render_text(text => 'Pass a facetype.');
};

get '/new-game/:facetype' => sub {
    my $self = shift;

    my $facetype = $self->param('facetype');

    if (!$db->{facetype}{$facetype}) {
        $self->render(text => 'Nope.');
        $db->{stats}{failed_newgame_facetypes}++;
        return;
    }

    $db->{stats}{newgames}++;

    my $gameid = new_game();

    $self->stash(gameid => $gameid);
    $self->stash(faceid => 1 + int(rand($db->{facetype}{$facetype}{nfaces})));
    $self->stash(firstuser => 1);

    $game{$gameid}{facetype} = $facetype;
    $game{$gameid}{faces} = [ $self->stash('faceid') ];

    render_game($self);
};

get '/game/:gameid' => sub {
    my $self = shift;

    my $gameid = $self->param('gameid');

    if (!$game{$gameid} || $game{$gameid}{state} ne 'join') {
        $self->render(text => 'Nope.');
        $db->{stats}{failed_joins}++;
        return;
    }

    $db->{stats}{http_gamestarts}++;

    my $facetype = $game{$gameid}{facetype};

    $self->stash(gameid => $gameid);

    $game{$gameid}{state} = 'play';
    do {
        $self->stash(faceid => 1 + int(rand($db->{facetype}{$facetype}{nfaces})));
    } while ($self->stash('faceid') == $game{$gameid}{faces}[0]);

    push @{ $game{$gameid}{faces} }, $self->stash('faceid');

    render_game($self);
};

websocket '/ws/game/:gameid' => sub {
    my $self = shift;

    my $gameid = $self->param('gameid');

    $db->{stats}{ws_connects}++;

    if (!($game{$gameid} && $game{$gameid}{ws_state} eq 'join')) {
        $self->send($json->encode({error => 'game-in-progress'}));
        return;
    }

    $ws_clients{$self} = $self;

    push @{ $game{$gameid}{websockets} }, $self;

    $game{$gameid}{n_connected}++;

    $self->on(message => sub {
        my ($self, $msg_str) = @_;

        print STDERR "Received message: $msg_str\n";

        my $msg = $json->decode($msg_str);

        my $playeridx = $game{$gameid}{websockets}[1] && $self == $game{$gameid}{websockets}[1];
        my $otherself = $game{$gameid}{opposite}{$self};

        if ($game{$gameid}{ws_state} ne 'play') {
            $self->send($json->encode({error => 'not-ready'}));
            return;
        }

        if ($game{$gameid}{expect_from}[$playeridx] eq 'silence') {
            $self->send($json->encode({error => 'shutup'}));
            return;
        }

        if ($msg->{type} eq 'question') {
            if ($game{$gameid}{expect_from}[$playeridx] eq 'question') {
                $self->send($json->encode({state => 'wait-answer'}));
                $otherself->send($json->encode({state => 'answer', question => $msg->{text}}));

                $game{$gameid}{expect_from}[$playeridx] = 'silence';
                $game{$gameid}{expect_from}[!$playeridx] = 'answer';
            }

            if ($game{$gameid}{expect_from}[$playeridx] eq 'answer') {
                $self->send($json->encode({state => 'ask'}));
                $otherself->send($json->encode({state => 'wait-question', answer => $msg->{text}}));

                $game{$gameid}{expect_from}[$playeridx] = 'question';
                $game{$gameid}{expect_from}[!$playeridx] = 'silence';
            }
        } elsif ($msg->{type} eq 'victory') {
            if ($game{$gameid}{expect_from}[$playeridx] eq 'question') {
                if ($game{$gameid}{faces}[!$playeridx] == $msg->{face}) {
                    $self->send($json->encode({state => 'victory'}));
                    $otherself->send($json->encode({state => 'defeat', face => $game{$gameid}{faces}[$playeridx]}));
                } else {
                    $otherself->send($json->encode({state => 'victory', face => $msg->{face}, realface => $game{$gameid}{faces}[$playeridx]}));
                    $self->send($json->encode({state => 'defeat', face => $game{$gameid}{faces}[!$playeridx]}));
                }

                $game{$gameid}{finished} = 1;
                $db->{stats}{finished_games}++;

                $self->finish();
                $otherself->finish();
            }
        } elsif ($msg->{type} eq 'answer') {
            if ($game{$gameid}{expect_from}[$playeridx] eq 'answer') {
                # don't allow arbitrary answers
                my $answer = $msg->{answer} eq 'yes' ? 'yes' : 'no';

                $self->send($json->encode({state => 'ask'}));
                $otherself->send($json->encode({state => 'wait-question', answer => $answer}));

                $game{$gameid}{expect_from}[$playeridx] = 'question';
                $game{$gameid}{expect_from}[!$playeridx] = 'silence';
            }
        }
    });

    $self->on(finish => sub {
        if (!$game{$gameid}{finished}) {
            $db->{stats}{game_aborts}++;
        }

        if ($game{$gameid}{opposite}{$self}) {
            $game{$gameid}{opposite}{$self}->send($json->encode({state => 'ditched'}));
            $game{$gameid}{opposite}{$self}->finish();
            $game{$gameid}{opposite} = {};
        }

        destroy_game($gameid) unless --$game{$gameid}{n_connected};

        delete $ws_clients{$self};
    });

    if (@{ $game{$gameid}{websockets} } == 2) {
        $db->{stats}{ws_gamestarts}++;

        $game{$gameid}{opposite}{$game{$gameid}{websockets}[0]} = $game{$gameid}{websockets}[1];
        $game{$gameid}{opposite}{$game{$gameid}{websockets}[1]} = $game{$gameid}{websockets}[0];
        $game{$gameid}{ws_state} = 'play';
        $game{$gameid}{expect_from}[0] = 'question';
        $game{$gameid}{expect_from}[1] = 'silence';

        $game{$gameid}{websockets}[0]->send($json->encode({state => 'ask'}));
        $game{$gameid}{websockets}[1]->send($json->encode({state => 'wait-question'}));
    } else {
        $self->send($json->encode({state => 'wait-partner'}));
    }
};

Mojo::IOLoop->recurring(10 => sub {
    for my $client (values %ws_clients) {
        $client->send($json->encode({ping => 'foo'}));
    }
});

app->secret($config->{passphrase});
app->start;

sub new_game {
    my $id = sprintf("%08x", int(rand(2**32)));

    $game{$id} = {
        state => 'join',
        ws_state => 'join',
    };

    return $id;
}

sub render_game {
    my $self = shift;

    my $gameid = $self->stash('gameid');
    my $facetype = $game{$gameid}{facetype};

    $self->stash(gameurl => "http://$host/game/" . $gameid);
    $self->stash(facename => $db->{facetype}{$facetype}{facenames}[$self->stash('faceid')]);
    $self->stash(facetype => $facetype);

    my @facenames = @{ $db->{facetype}{$facetype}{facenames} };
    $self->render('game',
        nfaces => $db->{facetype}{$facetype}{nfaces},
        facenames => $json->encode(\@facenames),
        singular => $db->{facetype}{$facetype}{singular},
        plural => $db->{facetype}{$facetype}{plural},
    );
}

sub destroy_game {
    my $gameid = shift;

    delete $game{$gameid};
}
