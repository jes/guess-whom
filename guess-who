#!/usr/bin/perl

use strict;
use warnings;

use Mojolicious::Lite;
use Mojo::JSON;

my $NHOOKERS = 10;
my @HOOKERNAME = qw(none Katja Stella Janine Jessica Mira Emma Adriana Carla Luisa Luna);

my %game;
my %ws_clients;

my $json = Mojo::JSON->new;

my $config = plugin 'Config';

foreach my $field (qw(host passphrase)) {
    die "no $field in config" unless exists $config->{$field};
}

my $host = $config->{host};

get '/new-game' => sub {
    my $self = shift;

    my $gameid = new_game();

    $self->stash(gameid => $gameid);
    $self->stash(gameurl => "http://$host/game/$gameid");
    $self->stash(faceid => 1 + int(rand($NHOOKERS)));
    $self->stash(facename => $HOOKERNAME[$self->stash('faceid')]);
    $self->stash(firstuser => 1);

    $game{$gameid}{first_face} = $self->stash('faceid');

    $self->render('game', nfaces => $NHOOKERS, facenames => $json->encode(\@HOOKERNAME));
};

get '/game/:gameid' => sub {
    my $self = shift;

    my $gameid = $self->param('gameid');

    if (!$game{$gameid} || $game{$gameid}{state} ne 'join') {
        $self->render(text => 'Nope.');
        return;
    }

    $game{$gameid}{state} = 'play';
    $self->stash(gameid => $gameid);
    $self->stash(gameurl => "http://$host/game/$gameid");
    do {
        $self->stash(faceid => 1 + int(rand($NHOOKERS)));
    } while ($self->stash('faceid') == $game{$gameid}{first_face});
    $self->stash(facename => $HOOKERNAME[$self->stash('faceid')]);
    $self->render('game', nfaces => $NHOOKERS, facenames => $json->encode(\@HOOKERNAME));
};

websocket '/ws/game/:gameid' => sub {
    my $self = shift;

    my $gameid = $self->param('gameid');

    if (!$game{$gameid} || $game{$gameid}{ws_state} ne 'join') {
        $self->send($json->encode({error => 'game-in-progress'}));
        return;
    }

    $ws_clients{$self} = $self;

    push @{ $game{$gameid}{websockets} }, $self;

    $self->on(message => sub {
        my ($self, $msg) = @_;

        my $playeridx = $self == $game{$gameid}{websockets}[1];
        my $otherself = $game{$gameid}{opposite}{$self};

        print STDERR "Received message: $msg\n";

        if ($game{$gameid}{ws_state} ne 'play') {
            $self->send($json->encode({error => 'not-ready'}));
            return;
        }

        if ($game{$gameid}{expect_from}[$playeridx] eq 'silence') {
            $self->send($json->encode({error => 'shutup'}));
            return;
        }

        if ($game{$gameid}{expect_from}[$playeridx] eq 'question') {
            $self->send($json->encode({state => 'wait-answer'}));
            $otherself->send($json->encode({state => 'answer', question => $msg}));

            $game{$gameid}{expect_from}[$playeridx] = 'silence';
            $game{$gameid}{expect_from}[!$playeridx] = 'answer';
            return;
        }

        if ($game{$gameid}{expect_from}[$playeridx] eq 'answer') {
            $self->send($json->encode({state => 'ask'}));
            $otherself->send($json->encode({state => 'wait-question', answer => $msg}));

            $game{$gameid}{expect_from}[$playeridx] = 'question';
            $game{$gameid}{expect_from}[!$playeridx] = 'silence';
        }
    });

    if (@{ $game{$gameid}{websockets} } == 2) {
        $game{$gameid}{opposite}{$game{$gameid}{websockets}[0]} = $game{$gameid}{websockets}[1];
        $game{$gameid}{opposite}{$game{$gameid}{websockets}[1]} = $game{$gameid}{websockets}[0];
        $game{$gameid}{ws_state} = 'play';
        $game{$gameid}{expect_from}[0] = 'question';
        $game{$gameid}{expect_from}[1] = 'silence';

        $game{$gameid}{websockets}[0]->send($json->encode({state => 'ask'}));
        $game{$gameid}{websockets}[1]->send($json->encode({state => 'wait-question'}));
    } else {
        $self->send($json->encode({state => 'wait-partner'}));
    }
};

Mojo::IOLoop->recurring(10 => sub {
    for my $client (values %ws_clients) {
        $client->send($json->encode({ping => 'foo'}));
    }
});

app->secret($config->{passphrase});
app->start;

sub new_game {
    my $id = sprintf("%08x", int(rand(2**32)));

    $game{$id} = {
        state => 'join',
        ws_state => 'join',
    };

    return $id;
}
