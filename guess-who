#!/usr/bin/perl

use strict;
use warnings;

use Mojolicious::Lite;
use Mojo::JSON;

my $NHOOKERS = 10;

my %game;

get '/new-game' => sub {
    my $self = shift;

    my $gameid = new_game();

    $self->stash(gameid => $gameid);
    $self->stash(hookerid => 1 + int(rand(10)));

    $game{$gameid}{first_hooker} = $self->stash('hookerid');

    $self->render('game');
};

get '/join-game/:gameid' => sub {
    my $self = shift;

    my $gameid = $self->param('gameid');

    if (!$game{$gameid} || $game{$gameid}{state} ne 'join') {
        $self->render(text => 'Nope.');
        return;
    }

    $game{$gameid}{state} = 'play';
    $self->stash(gameid => $gameid);
    do {
        $self->stash(hookerid => 1 + int(rand(10)));
    } while ($self->stash('hookerid') == $game{$gameid}{first_hooker});
    $self->render('game');
};

websocket '/game/:gameid' => sub {
    my $self = shift;

    my $gameid = $self->param('gameid');

    my $json = Mojo::JSON->new;

    if (!$game{$gameid} || $game{$gameid}{ws_state} ne 'join') {
        $self->send($json->encode({error => 'game-in-progress'}));
        return;
    }

    push @{ $game{$gameid}{websockets} }, $self;

    $self->on(message => sub {
        my ($self, $msg) = @_;

        my $playeridx = $self == $game{$gameid}{websockets}[1];
        my $otherself = $game{$gameid}{opposite}{$self};

        print STDERR "Received message: $msg\n";

        if ($game{$gameid}{ws_state} ne 'play') {
            $self->send($json->encode({error => 'not-ready'}));
            return;
        }

        if ($game{$gameid}{expect_from}[$playeridx] eq 'silence') {
            $self->send($json->encode({error => 'silence'}));
            return;
        }

        if ($game{$gameid}{expect_from}[$playeridx] eq 'question') {
            $self->send($json->encode({state => 'wait-answer'}));
            $otherself->send($json->encode({state => 'answer', question => $msg}));

            $game{$gameid}{expect_from}[$playeridx] = 'silence';
            $game{$gameid}{expect_from}[!$playeridx] = 'answer';
            return;
        }

        if ($game{$gameid}{expect_from}[$playeridx] eq 'answer') {
            $self->send($json->encode({state => 'ask'}));
            $otherself->send($json->encode({state => 'wait-question', answer => $msg}));

            $game{$gameid}{expect_from}[$playeridx] = 'question';
            $game{$gameid}{expect_from}[!$playeridx] = 'silence';
        }
    });

    if (@{ $game{$gameid}{websockets} } == 2) {
        $game{$gameid}{opposite}{$game{$gameid}{websockets}[0]} = $game{$gameid}{websockets}[1];
        $game{$gameid}{opposite}{$game{$gameid}{websockets}[1]} = $game{$gameid}{websockets}[0];
        $game{$gameid}{ws_state} = 'play';
        $game{$gameid}{expect_from}[0] = 'question';
        $game{$gameid}{expect_from}[1] = 'silence';

        $game{$gameid}{websockets}[0]->send($json->encode({state => 'ask'}));
        $game{$gameid}{websockets}[1]->send($json->encode({state => 'wait-question'}));
    } else {
        $self->send($json->encode({state => 'wait-partner'}));
    }
};

app->start;

sub new_game {
    my $id = sprintf("%08x", int(rand(2**32)));

    $game{$id} = {
        state => 'join',
        ws_state => 'join',
    };

    return $id;
}

__DATA__

@@ game.html.ep
<h1>Game <%= $gameid %></h1>

<p>Send this link to a friend: <a href="http://mojolicious-dev:3000/join-game/<%= $gameid %>">http://mojolicious-dev:3000/join-game/<%= $gameid %></a>.</p>

<img src="/hooker/<%= $hookerid %>.jpg">

<p><b>Question: </b><span id="question"></span></p>
<p><b>Answer: </b><span id="answer"></span></p>
<p><b>State: </b><span id="state">Loading...</span></p>

<input id="input" type="text">
<button onclick="send_text()">Send</button>

<script type="text/javascript">
    var gameid = '<%= $gameid %>';
</script>
<script src="/game.js" type="text/javascript"></script>

@@ game.js
var ws = new WebSocket('ws://mojolicious-dev:3000/game/' + gameid);

var statemap = {
    "ask": "Ask a question.",
    "answer": "Answer the question.",
    "loading": "Loading...",
    "wait-answer": "Waiting for answer...",
    "wait-partner": "Waiting for partner...",
    "wait-question": "Waiting for question...",
};

var state = 'loading';

ws.onopen = function() {
    console.log("Connection opened!");
}

ws.onmessage = function(msg) {
    console.log("Received message: " + msg.data);

    var d = JSON.parse(msg.data);

    if (d['state']) {
        state = d['state'];
        document.getElementById('state').innerHTML = statemap[state] ? statemap[state] : state;
    }

    if (d['answer']) {
        document.getElementById('answer').innerHTML = d['answer'];
    }

    if (d['question']) {
        document.getElementById('question').innerHTML = d['question'];
    }
}

function send_text() {
    var text = document.getElementById('input').value;

    if (state == 'ask') {
        document.getElementById('question').innerHTML = text;
    } else if (state == 'answer') {
        document.getElementById('answer').innerHTML = '';
        document.getElementById('question').innerHTML = '';
    }

    ws.send(text);
}
